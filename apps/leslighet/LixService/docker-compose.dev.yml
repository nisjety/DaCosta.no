services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: lix_service_dev
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PROMETHEUS_METRICS_PORT=8000
      - PROMETHEUS_METRICS_PATH=/metrics
      - ENABLE_METRICS=true
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=console
      - API_RELOAD=true
      - API_DEBUG=true
      - API_WORKERS=1
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - CLERK_API_KEY=${CLERK_API_KEY:-}
      - CLERK_JWT_PUBLIC_KEY=${CLERK_JWT_PUBLIC_KEY:-}
      # RabbitMQ configuration
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_VHOST=/
      - RABBITMQ_EXCHANGE=readability.persistent
      - RABBITMQ_ROUTING_KEY=lix.analysis
      - RABBITMQ_QUEUE_NAME=lix_analysis_queue
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      - redis
      - rabbitmq
    networks:
      - lix_network
    volumes:
      - ./:/app
      - app_logs:/app/logs
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  redis:
    image: redis:7-alpine
    container_name: lix_redis_dev
    ports:
      - "6381:6379"  # Changed host port to 6381 to avoid port conflict
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - lix_network

  prometheus:
    image: prom/prometheus:latest
    container_name: lix_prometheus_dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    networks:
      - lix_network

  grafana:
    image: grafana/grafana:latest
    container_name: lix_grafana_dev
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    networks:
      - lix_network
    depends_on:
      - prometheus

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: lix_rabbitmq_dev
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - lix_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  # RabbitMQ exporter for Prometheus
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter
    container_name: lix_rabbitmq_exporter_dev
    ports:
      - "9419:9419"
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=guest
      - RABBIT_PASSWORD=guest
    depends_on:
      - rabbitmq
    networks:
      - lix_network

networks:
  lix_network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  app_logs:
  rabbitmq_data: